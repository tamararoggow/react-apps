{"version":3,"sources":["components/forecastday.jsx","components/bottom.jsx","components/titles.jsx","components/weathersummary.jsx","components/weather.jsx","App.jsx","serviceWorker.js","store.js","index.js"],"names":["Forecastday","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","day","react_default","a","createElement","className","date","src","condition","icon","alt","maxtemp_f","mintemp_f","text","Component","Bottomweather","forecastdays","map","idx","forecastday","key","Titles","e","setState","locationName","target","value","eventEmitter","emit","submitLocation","_this$props","cityName","region","type","name","id","placeholder","onChange","onLocationUpdate","bind","onClick","Summary","Weather","temp","updated","App","undefined","numforecastDays","isLoading","_this2","_this$state","URL","concat","axios","get","then","res","data","current","temp_f","location","last_updated","forecast","catch","err","console","error","_this3","updateWeatherApp","on","_this$state2","titles","weathersummary","weather","bottom","Boolean","window","hostname","match","Store","EventEmitter","appName","React","Children","children","child","cloneElement","objectSpread","ReactDOM","render","store_Store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b78e45b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Forecastday extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        const { day } = this.props;\r\n        if (!day) return null;\r\n        return ( \r\n            <div className=\"forecastday-container\">\r\n                <div className=\"forecastDate\">{day.date}</div>\r\n                <div className=\"forecastIcon\"><img src={day.condition.icon} alt=\"weather_icon\" /></div>\r\n                <div className=\"forecastTemp\">Hi: {day.maxtemp_f}</div>\r\n                <div className=\"forecastTemp\">Lo: {day.mintemp_f}</div>\r\n                <div className=\"forecastCondition\">{day.condition.text}</div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Forecastday;","import React, { Component } from 'react';\r\n\r\nimport Forecastday from \"./forecastday\"\r\n\r\nclass Bottomweather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        const { forecastdays } = this.props;\r\n        \r\n        return ( \r\n            <div className=\"bottom-container\">\r\n                <h1 className=\"fiveHead\">5 Day Forecast</h1>\r\n                <div className=\"eachDay\">\r\n                    {forecastdays && forecastdays.map((day, idx) => {\r\n                        return <Forecastday day={day.day} key={idx}/>;\r\n                    })}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Bottomweather;","import React, { Component } from 'react';\r\n\r\nclass Titles extends Component {\r\n\r\n  onLocationUpdate(e) {\r\n    this.setState({ locationName: e.target.value })\r\n  }\r\n\r\n  submitLocation() {\r\n    const { locationName } = this.state;\r\n    const { eventEmitter } = this.props;\r\n\r\n    eventEmitter.emit(\"updateWeather\", locationName);\r\n  }\r\n\r\n  state = {  }\r\n  render() { \r\n    const { submitLocation } = this.state;\r\n    const { cityName, region } = this.props;\r\n\r\n    return ( \r\n      <div className=\"topTitle\" >\r\n        <h1 className=\"title\">Current Weather for {cityName}, {region}</h1>\r\n        <div>\r\n          <input\r\n            className=\"inputText\"\r\n            type=\"text\"\r\n            name=\"city\"\r\n            id=\"city\"\r\n            placeholder=\"City, State\"\r\n            onChange={this.onLocationUpdate.bind(this)}\r\n          />\r\n          <button className=\"myButton\" onClick={this.submitLocation.bind(this)} >Get Weather</button>\r\n        </div>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Titles;\r\n","import React, { Component } from 'react';\r\n\r\nclass Summary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return (\r\n          <div className=\"forecast\">\r\n            <h2 className=\"rayHead\">Ray's Forecast</h2>\r\n            <p className=\"raySummary\">\r\n              A southerly flow returns today as high pressure is\r\n              centered off the Carolinas coast resulting in a warmer\r\n              afternoon. However, the mild-up is interrupted tomorrow.\r\n              Rain develops overnight and continues through the early to\r\n              mid-afternoon hours Friday keeping a lid on temperatures.\r\n              Overall the weekend is warmer and manageable with a couple\r\n              of minor wrinkles. First, I can't rule out some daytime\r\n              sprinkles Saturday. Second, showers return late Sunday\r\n              afternoon.\r\n            </p>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Summary;","import React, { Component } from 'react';\r\n\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() { \r\n        const { text, icon, temp, updated } = this.props;\r\n\r\n        return (\r\n          <div className=\"weatherWidget\">\r\n                <div className=\"condition\">{text}</div>\r\n                <div className=\"iconWeather\"><img src={icon} alt=\"weather_icon\"/></div>\r\n                <div className=\"temp\">{temp}°</div>\r\n                <div className=\"updated\">{updated}</div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Weather;","\n// Weather app created by Tamara Roggow\n\nimport React, { Component } from 'react';\nimport \"./sass/app.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nimport Bottomweather from './components/bottom'\nimport Titles from \"./components/titles\"\nimport Summary from \"./components/weathersummary\";\nimport Weather from \"./components/weather\"\n\nconst API_KEY = \"bfb1fc18836b4d14800213219191303\";\n\n// Parent Component\nclass App extends Component {\n  constructor(props) {\n    super(props);\n// field names used throughout components\n    this.state = {\n      cityName: \"Burnsville, nc\",\n      region: undefined,\n      numforecastDays: 5,\n      temp: undefined,\n      icon: undefined,\n      updated: undefined,\n      text: undefined,\n      isLoading: true  // initiated to true on load\n    }\n  }\n// fetches weather from Apixu.com and sets the state for Parent component\n  updateWeatherApp() {\n    const { cityName, numforecastDays } = this.state;\n    const URL =\n      `http://api.apixu.com/v1/forecast.json?key=${API_KEY}&q=${cityName}&${numforecastDays}`;\n    axios.get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        this.setState({ isLoading: false, \n          temp: data.current.temp_f, \n          text: data.current.condition.text, \n          cityName: data.location.name, \n          region: data.location.region, \n          updated: data.current.last_updated, \n          icon: data.current.condition.icon, \n          forecastdays: data.forecast.forecastday })  // ERROR - fetching only first day from forecast day\n      })\n// needed for error output and logging\n      .catch((err) => {\n        if (err)\n          console.error(\"Cannot fetch Weather Data from API,\", err);\n      })\n  }\n// gets function \"updateWeather\" from titles.jsx\n  componentDidMount() {\n    const { eventEmitter } = this.props;\n// gets function updateWeatherApp from above and...\n    this.updateWeatherApp();\n\n    eventEmitter.on(\"updateWeather\", (data) => {\n// sets the state based upon user input from \"submitLocation\" function in titles.jsx\n      this.setState({ cityName: data }, () => this.updateWeatherApp())\n    })\n  }\n\n  render() {\n\n    const { isLoading, text, temp, icon, updated, cityName, region, forecastdays } = this.state;\n    const { eventEmitter } = this.props;\n// mainDiv div contains entire output rendered --- used to style app relative to page it's rendered on\n// weatherMain div contains all components --- used to style all components in conjuction\n    return (\n      <div className=\"container mainDiv\">\n        <div className=\"weatherMain\">\n          {isLoading && <h3>Weather is loading...</h3>} \n          {!isLoading &&\n          <div>\n            <Titles \n              cityName={cityName}\n              region={region}\n              eventEmitter={this.props.eventEmitter} />\n          </div>}\n          <div>\n            <Summary />\n            <Weather\n              text={text}\n              icon={icon}\n              temp={temp}\n              updated={updated}\n              error={this.state.error}\n            />\n          </div>\n          <div className=\"bottom\">\n            <Bottomweather forecastdays={forecastdays}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport default class Store extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // uses eventEmitter to trigger data update on state change for cityName\r\n        this.eventEmitter = new EventEmitter();\r\n        \r\n\r\n        //Main App State\r\n        this.state = {\r\n            appName: \"Weather App\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return React.Children.map(this.props.children, child => {\r\n            return React.cloneElement(child, { ...this.state, eventEmitter: this.eventEmitter });\r\n        });\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Store from \"./store\";\n\n\nReactDOM.render(<Store>\n    <App />\n    </Store>, document.getElementById('weatherapp'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}